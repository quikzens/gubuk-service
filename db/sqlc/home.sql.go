// Code generated by sqlc. DO NOT EDIT.
// source: home.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countHouse = `-- name: CountHouse :one
SELECT COUNT(*) FROM homes
`

func (q *Queries) CountHouse(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countHouse)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHouse = `-- name: CreateHouse :one
INSERT INTO homes (
  id,
  owner_id,
  title,
  featured_image,
  bedrooms,
  bathrooms,
  type_rent,
  price,
  province_id,
  city_id,
  description,
  amenities,
  area
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, owner_id, title, featured_image, bedrooms, bathrooms, type_rent, price, province_id, city_id, description, amenities, area, created_at, updated_at
`

type CreateHouseParams struct {
	ID            uuid.UUID `json:"id"`
	OwnerID       uuid.UUID `json:"owner_id"`
	Title         string    `json:"title"`
	FeaturedImage string    `json:"featured_image"`
	Bedrooms      int32     `json:"bedrooms"`
	Bathrooms     int32     `json:"bathrooms"`
	TypeRent      string    `json:"type_rent"`
	Price         int64     `json:"price"`
	ProvinceID    int32     `json:"province_id"`
	CityID        int32     `json:"city_id"`
	Description   string    `json:"description"`
	Amenities     string    `json:"amenities"`
	Area          int32     `json:"area"`
}

func (q *Queries) CreateHouse(ctx context.Context, arg CreateHouseParams) (Home, error) {
	row := q.db.QueryRowContext(ctx, createHouse,
		arg.ID,
		arg.OwnerID,
		arg.Title,
		arg.FeaturedImage,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.TypeRent,
		arg.Price,
		arg.ProvinceID,
		arg.CityID,
		arg.Description,
		arg.Amenities,
		arg.Area,
	)
	var i Home
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.FeaturedImage,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.TypeRent,
		&i.Price,
		&i.ProvinceID,
		&i.CityID,
		&i.Description,
		&i.Amenities,
		&i.Area,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHouse = `-- name: DeleteHouse :exec
DELETE FROM homes 
WHERE id = $1
`

func (q *Queries) DeleteHouse(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteHouse, id)
	return err
}

const getHouseById = `-- name: GetHouseById :one
SELECT 
  homes.id,
  homes.title,
  homes.featured_image,
  homes.bedrooms,
  homes.bathrooms,
  homes.type_rent,
  homes.price,
  homes.province_id,
  homes.city_id,
  homes.description,
  homes.amenities,
  homes.area,
  homes.created_at,
  homes.updated_at,
  owner.id AS owner_id,
  owner.fullname AS owner_fullname,
  owner.username AS owner_username,
  owner.email AS owner_email,
  owner.role AS owner_role, 
  owner.gender AS owner_gender, 
  owner.phone_number AS owner_phone_number, 
  owner.address AS owner_address
FROM homes
JOIN users AS owner
ON owner.id = homes.owner_id
WHERE homes.id = $1 LIMIT 1
`

type GetHouseByIdRow struct {
	ID               uuid.UUID `json:"id"`
	Title            string    `json:"title"`
	FeaturedImage    string    `json:"featured_image"`
	Bedrooms         int32     `json:"bedrooms"`
	Bathrooms        int32     `json:"bathrooms"`
	TypeRent         string    `json:"type_rent"`
	Price            int64     `json:"price"`
	ProvinceID       int32     `json:"province_id"`
	CityID           int32     `json:"city_id"`
	Description      string    `json:"description"`
	Amenities        string    `json:"amenities"`
	Area             int32     `json:"area"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	OwnerID          uuid.UUID `json:"owner_id"`
	OwnerFullname    string    `json:"owner_fullname"`
	OwnerUsername    string    `json:"owner_username"`
	OwnerEmail       string    `json:"owner_email"`
	OwnerRole        string    `json:"owner_role"`
	OwnerGender      string    `json:"owner_gender"`
	OwnerPhoneNumber string    `json:"owner_phone_number"`
	OwnerAddress     string    `json:"owner_address"`
}

func (q *Queries) GetHouseById(ctx context.Context, id uuid.UUID) (GetHouseByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getHouseById, id)
	var i GetHouseByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.FeaturedImage,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.TypeRent,
		&i.Price,
		&i.ProvinceID,
		&i.CityID,
		&i.Description,
		&i.Amenities,
		&i.Area,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
		&i.OwnerFullname,
		&i.OwnerUsername,
		&i.OwnerEmail,
		&i.OwnerRole,
		&i.OwnerGender,
		&i.OwnerPhoneNumber,
		&i.OwnerAddress,
	)
	return i, err
}

const listHouse = `-- name: ListHouse :many
SELECT 
  id,
  title,
  featured_image,
  bedrooms,
  bathrooms,
  type_rent,
  price,
  province_id,
  city_id,
  description,
  amenities,
  area,
  created_at,
  updated_at
FROM homes 
ORDER BY created_at DESC
`

type ListHouseRow struct {
	ID            uuid.UUID `json:"id"`
	Title         string    `json:"title"`
	FeaturedImage string    `json:"featured_image"`
	Bedrooms      int32     `json:"bedrooms"`
	Bathrooms     int32     `json:"bathrooms"`
	TypeRent      string    `json:"type_rent"`
	Price         int64     `json:"price"`
	ProvinceID    int32     `json:"province_id"`
	CityID        int32     `json:"city_id"`
	Description   string    `json:"description"`
	Amenities     string    `json:"amenities"`
	Area          int32     `json:"area"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) ListHouse(ctx context.Context) ([]ListHouseRow, error) {
	rows, err := q.db.QueryContext(ctx, listHouse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListHouseRow
	for rows.Next() {
		var i ListHouseRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.FeaturedImage,
			&i.Bedrooms,
			&i.Bathrooms,
			&i.TypeRent,
			&i.Price,
			&i.ProvinceID,
			&i.CityID,
			&i.Description,
			&i.Amenities,
			&i.Area,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMyHouse = `-- name: ListMyHouse :many
SELECT 
  id,
  title,
  featured_image,
  bedrooms,
  bathrooms,
  type_rent,
  price,
  province_id,
  city_id,
  description,
  amenities,
  area,
  created_at,
  updated_at
FROM homes 
WHERE owner_id = $1
ORDER BY created_at DESC
`

type ListMyHouseRow struct {
	ID            uuid.UUID `json:"id"`
	Title         string    `json:"title"`
	FeaturedImage string    `json:"featured_image"`
	Bedrooms      int32     `json:"bedrooms"`
	Bathrooms     int32     `json:"bathrooms"`
	TypeRent      string    `json:"type_rent"`
	Price         int64     `json:"price"`
	ProvinceID    int32     `json:"province_id"`
	CityID        int32     `json:"city_id"`
	Description   string    `json:"description"`
	Amenities     string    `json:"amenities"`
	Area          int32     `json:"area"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) ListMyHouse(ctx context.Context, ownerID uuid.UUID) ([]ListMyHouseRow, error) {
	rows, err := q.db.QueryContext(ctx, listMyHouse, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMyHouseRow
	for rows.Next() {
		var i ListMyHouseRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.FeaturedImage,
			&i.Bedrooms,
			&i.Bathrooms,
			&i.TypeRent,
			&i.Price,
			&i.ProvinceID,
			&i.CityID,
			&i.Description,
			&i.Amenities,
			&i.Area,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHouse = `-- name: UpdateHouse :one
UPDATE homes
SET
  title = $2,
  featured_image = $3,
  bedrooms = $4,
  bathrooms = $5,
  type_rent = $6,
  price = $7,
  province_id = $8,
  city_id = $9,
  description = $10,
  amenities = $11,
  area = $12
WHERE id = $1
RETURNING id, owner_id, title, featured_image, bedrooms, bathrooms, type_rent, price, province_id, city_id, description, amenities, area, created_at, updated_at
`

type UpdateHouseParams struct {
	ID            uuid.UUID `json:"id"`
	Title         string    `json:"title"`
	FeaturedImage string    `json:"featured_image"`
	Bedrooms      int32     `json:"bedrooms"`
	Bathrooms     int32     `json:"bathrooms"`
	TypeRent      string    `json:"type_rent"`
	Price         int64     `json:"price"`
	ProvinceID    int32     `json:"province_id"`
	CityID        int32     `json:"city_id"`
	Description   string    `json:"description"`
	Amenities     string    `json:"amenities"`
	Area          int32     `json:"area"`
}

func (q *Queries) UpdateHouse(ctx context.Context, arg UpdateHouseParams) (Home, error) {
	row := q.db.QueryRowContext(ctx, updateHouse,
		arg.ID,
		arg.Title,
		arg.FeaturedImage,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.TypeRent,
		arg.Price,
		arg.ProvinceID,
		arg.CityID,
		arg.Description,
		arg.Amenities,
		arg.Area,
	)
	var i Home
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.FeaturedImage,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.TypeRent,
		&i.Price,
		&i.ProvinceID,
		&i.CityID,
		&i.Description,
		&i.Amenities,
		&i.Area,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
