// Code generated by sqlc. DO NOT EDIT.
// source: transaction.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  id,
  tenant_id,
  owner_id,
  house_id,
  payment_status,
  payment_proof,
  total_payment,
  check_in,
  check_out,
  time_rent
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, tenant_id, owner_id, house_id, payment_status, payment_proof, total_payment, check_in, check_out, time_rent, created_at, updated_at
`

type CreateTransactionParams struct {
	ID            uuid.UUID `json:"id"`
	TenantID      uuid.UUID `json:"tenant_id"`
	OwnerID       uuid.UUID `json:"owner_id"`
	HouseID       uuid.UUID `json:"house_id"`
	PaymentStatus string    `json:"payment_status"`
	PaymentProof  string    `json:"payment_proof"`
	TotalPayment  int64     `json:"total_payment"`
	CheckIn       time.Time `json:"check_in"`
	CheckOut      time.Time `json:"check_out"`
	TimeRent      string    `json:"time_rent"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.TenantID,
		arg.OwnerID,
		arg.HouseID,
		arg.PaymentStatus,
		arg.PaymentProof,
		arg.TotalPayment,
		arg.CheckIn,
		arg.CheckOut,
		arg.TimeRent,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.OwnerID,
		&i.HouseID,
		&i.PaymentStatus,
		&i.PaymentProof,
		&i.TotalPayment,
		&i.CheckIn,
		&i.CheckOut,
		&i.TimeRent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions 
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const updateTransactionPaymentProofById = `-- name: UpdateTransactionPaymentProofById :exec
UPDATE transactions 
SET 
  payment_status = $2,
  payment_proof = $3,
  updated_at = $4
WHERE id = $1
`

type UpdateTransactionPaymentProofByIdParams struct {
	ID            uuid.UUID `json:"id"`
	PaymentStatus string    `json:"payment_status"`
	PaymentProof  string    `json:"payment_proof"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTransactionPaymentProofById(ctx context.Context, arg UpdateTransactionPaymentProofByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionPaymentProofById,
		arg.ID,
		arg.PaymentStatus,
		arg.PaymentProof,
		arg.UpdatedAt,
	)
	return err
}

const updateTransactionStatusById = `-- name: UpdateTransactionStatusById :exec
UPDATE transactions 
SET 
  payment_status = $2,
  updated_at = $3
WHERE id = $1
`

type UpdateTransactionStatusByIdParams struct {
	ID            uuid.UUID `json:"id"`
	PaymentStatus string    `json:"payment_status"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTransactionStatusById(ctx context.Context, arg UpdateTransactionStatusByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatusById, arg.ID, arg.PaymentStatus, arg.UpdatedAt)
	return err
}
